‚úÖ What are Transactions in SQL?
A transaction is a sequence of one or more SQL statements that are executed as a single unit of work. Transactions ensure data integrity, especially when multiple operations must all succeed or fail together.

Why Transactions?
Atomicity: All or nothing ‚Äî if one part fails, the entire transaction is rolled back.
Consistency: Keeps the database in a valid state before and after.
Isolation: Each transaction occurs independently (until committed).
Durability: Once committed, changes persist even after power failure.

 Transaction Flow Summary:
Start with BEGIN;
This tells SQLite: "Start a transaction ‚Äî don‚Äôt save any changes yet."
Perform your SQL queries
e.g., UPDATE, DELETE, INSERT etc.
If everything goes smoothly, you finalize and save the changes using:

‚ö†Ô∏è Important Notes:
COMMIT and ROLLBACK are run as separate statements, after your queries.
Once you COMMIT, you cannot rollback ‚Äî the changes are permanent.
If you don‚Äôt use BEGIN, each statement is auto-committed immediately ‚Äî no rollback is possible.

 Real-life Analogy:
Think of BEGIN like opening a notepad.
You write changes (queries) but don‚Äôt hit save yet.
If you're happy ‚Üí Save (COMMIT)
If not ‚Üí Close without saving (ROLLBACK)

When you're not using transactions explicitly, SQLite (and many other databases) performs what's called auto-commit mode:
Each statement (like CREATE TABLE, INSERT, UPDATE) is automatically committed right after execution.
That means you can't undo a mistake ‚Äî there's no rollback unless you explicitly wrapped the changes in a BEGIN block.

| Without Transaction                  | With Transaction               |
| ------------------------------------ | ------------------------------ |
| Each change is final                 | Changes can be reversed        |
| Mistakes are permanent               | Mistakes can be undone         |
| No safety during multiple operations | Multiple changes = all or none |


üîÑ Scenario:
Suppose you want to do the following together:

Add a new department.
Add a new salary grade.
Add a new employee in that department with that grade.
You only want these changes if all three succeed.

INSERT INTO Department (dept_id, dept_name) VALUES (6, 'Legal');
INSERT INTO Salary (grade, base_salary) VALUES ('E', 250000);
INSERT INTO Employee (emp_id, name, email, grade, dept_id)
VALUES (101, 'Ravi Sharma', 'ravi@example.com', 'E', 6);
If the third query fails (say duplicate emp_id), the first two still remain ‚Äî and your data is inconsistent.

BEGIN;

INSERT INTO Department (dept_id, dept_name) VALUES (6, 'Legal');
INSERT INTO Salary (grade, base_salary) VALUES ('E', 250000);
INSERT INTO Employee (emp_id, name, email, grade, dept_id)
VALUES (101, 'Ravi Sharma', 'ravi@example.com', 'E', 6);

-- If everything worked fine:
COMMIT;

-- If anything goes wrong:
-- ROLLBACK;


üí° When to use BEGIN:
‚úÖ Use it when:

You're modifying multiple tables.
You want atomicity (all succeed or none).
You‚Äôre not sure if all operations will succeed.

üö´ Not needed when:

You‚Äôre doing a simple one-line SELECT.
You're doing a single safe INSERT.



